(function () {
    // The width and height of the captured photo. We will set the
    // width to the value defined here, but the height will be
    // calculated based on the aspect ratio of the input stream.

    var width = 480;    // We will scale the photo width to this
    var height = 0;     // This will be computed based on the input stream

    // |streaming| indicates whether or not we're currently streaming
    // video from the camera. Obviously, we start at false.

    var streaming = false;

    // The various HTML elements we need to configure or control. These
    // will be set by the startup() function.

    var video = null;
    var canvas = null;
    var startbutton = null;
    var retakephoto = null;
    video = document.getElementById('video');
    if (video) {
        canvas = document.getElementById('canvas');
        startbutton = document.getElementById('startbutton');
        retakephoto = document.getElementById('retakephoto');
        video.addEventListener('canplay', function (ev) {
            if (!streaming) {
                height = video.videoHeight / (video.videoWidth / width);

                // Firefox currently has a bug where the height can't be read from
                // the video, so we will make assumptions if this happens.
                video.setAttribute('width', width);
                video.setAttribute('height', height);
                canvas.setAttribute('width', width);
                canvas.setAttribute('height', height);

                streaming = true;
            }
        }, false);

        startbutton.addEventListener('click', function (ev) {
            $('.main-content button, .main-content #back').attr('disabled', 'disabled');
            takepicture();
            ev.preventDefault();
        }, false);
        retakephoto.addEventListener('click', function (ev) {
            clearphoto();
            $('#result').hide();
            $('#retakephoto').removeAttr('disabled');
            $('.camera').show();
            $('#startbutton').removeAttr('disabled');
            ev.preventDefault();
        })
        clearphoto();
    }
    window.startup = function () {
        if (navigator.mediaDevices) {
            navigator.mediaDevices.getUserMedia({video: true, audio: false})
                .then(function (stream) {
                    $('#photo-register').show();
                    $('.upload-confirm-photo').hide();
                    $('.upload-confirm-photo input').attr('disabled', 'disabled');
                    video.srcObject = stream;
                    video.play();
                })
                .catch(function (exception) {
                    $('#photo-register').hide();
                    $('.upload-confirm-photo').show();
                    $('.upload-confirm-photo input').removeAttr('disabled');
                });
        }else {
            $('#photo-register').hide();
            $('.upload-confirm-photo').show();
            $('.upload-confirm-photo input').removeAttr('disabled');
        }
    }

    // Fill the photo with an indication that none has been
    // captured.

    function clearphoto() {
        var context = canvas.getContext('2d');
        context.fillStyle = "#AAA";
        context.fillRect(0, 0, canvas.width, canvas.height);
    }

    // Capture a photo by fetching the current contents of the video
    // and drawing it into a canvas, then converting that to a PNG
    // format data URL. By drawing it on an offscreen canvas and then
    // drawing that to the screen, we can change its size and/or apply
    // other changes before drawing it.

    function takepicture() {
        let form = $('#photo-confirm-area');
        let error = $('#error', form[0]);
        let errorMessage = $('#errorMessage', form[0]);
        errorMessage.html('');
        error.hide();
        var context = canvas.getContext('2d');
        if (width && height) {
            canvas.width = width;
            canvas.height = height;
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.drawImage(video, 0, 0, width, height);
            let document_type = $('input[name=document_type]', form).val();
            let data = canvas.toDataURL('image/jpeg');
            $.ajax({
                method: 'POST',
                cache: false,
                url: `index.php?m=contracts&action=${document_type}/getImage`,
                data: {
                    image: data,
                    document_type: document_type,
                    document: $('input[name=document_id]', form).val()
                },
            }).done(function (data) {
                if (data.success) {
                    $('#result').show();
                    let image = new Image(canvas.width, canvas.height);
                    image.onload = function () {
                        context.drawImage(image, 0, 0, canvas.width, canvas.height);
                        $('.signature-pad--step2 #canvas').show();
                    }
                    image.src = data.data;
                    $('.camera').hide();
                    $('#startbutton').attr('disabled', 'disabled');
                    $('.main-content button, .main-content #back').removeAttr('disabled');
                } else {
                    errorMessage.html(data.message);
                    error.show();
                    clearphoto();
                }
            });
        } else {
            clearphoto();
        }
    }

})();
